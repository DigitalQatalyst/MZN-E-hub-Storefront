# trigger:
#   branches:
#     include:
#       - Develop  # Trigger the pipeline on updates to the 'develop' branch

# âœ… Use pipeline run button (manual UI or API)
pr: none
trigger: none  # ðŸ”’ Explicitly disables automatic CI triggers

pool:
  vmImage: 'ubuntu-latest'  # Use an Ubuntu-based agent for the pipeline.

variables:
- group: 'ovh-registry-secrets'
- name: imageName
  value: 'frontend'  # Define the image name
- name: registry
  value: 'u4c2j2w9.c1.gra9.container-registry.ovh.net/kf'  # OVH Container Registry URL
- name: imageTag
  value: 'staging-$(Build.BuildId)'  # Use the build ID as the image tag


steps:
# 1. Building Vendure Image
- task: Docker@2
  inputs:
    containerRegistry: 'OVH -Registry'
    repository: 'kf/frontend'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    buildContext: '**'
    tags: |
      $(imageTag)

# 2. Setting Image with Build Id and creating secret.
- script: |
    echo "Injecting image tag: staging-$(Build.BuildId)"
    sed -i "s|image: .*$|image: $(registry)/$(imageName):$(imageTag)|" **/k8s/base/vendure/deployment.yaml
  displayName: 'Setting Image with BuildId'

# 3. Download the Kubeconfig File from Azure DevOps Secure Files
- task: DownloadSecureFile@1
  displayName: 'GetKubeconfig'
  name: GetKubeconfig
  inputs:
    secureFile: 'kubeconfig-kf.yml'  # Use the name of your Kubeconfig secure file in Azure DevOps
  
#4. Authenticating Kubernetes.'
- script: |
      echo "Authenticating Kubernetes"
      mkdir -p ~/.kube
      cp $KUBECONFIG_FILE ~/.kube/config 
      kubectl config use-context kubernetes-admin@khalifa-fund-cluster
      kubectl config get-contexts

  env:
    KUBECONFIG_FILE: $(GetKubeconfig.secureFilePath)
  displayName: 'Authenticating Kubernetes'

# 5. Deploying Image to OVH
- task: Kubernetes@1
  displayName: 'Deploy to OVH Kubernetes Cluster'
  inputs:
    connectionType: 'Kubernetes service connection'
    kubernetesServiceEndpoint: 'Kubernetes-kf'  # Use your secure file path or environment variable
    command: 'apply'
    arguments: '-f **/k8s/overlays/staging/deployment.yaml'
    # Optional: Add namespace if needed (default or specify another)
    namespace: 'staging'
